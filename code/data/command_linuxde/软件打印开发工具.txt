
$ mmove autorun.bat test        #移动文件到目录test中

mattrib a:

mattrib -h -s -r a:msdos.sys

mattrib -r -/ a:*.*

mdel a:autoexec.bat .

# pssh -h ip.txt -i uptime
[1] 11:15:03 [SUCCESS] Mar.mars.he
11:15:11 up 4 days, 16:25,  1 user,  load average: 0.00, 0.00, 0.00
[2] 11:15:03 [SUCCESS] Jan.mars.he
11:15:12 up 3 days, 23:26,  0 users,  load average: 0.00, 0.00, 0.00
[3] 11:15:03 [SUCCESS] Feb.mars.he
11:15:12 up 4 days, 16:26,  2 users,  load average: 0.08, 0.02, 0.01

# pssh -h IP.txt -i "/usr/local/mysql/bin/mysql -e 'show slave status \G'"|grep Running:
Slave_IO_Running: yes
Slave_SQL_Running: Yes
Slave_IO_Running: Yes
Slave_SQL_Running: Yes
Slave_IO_Running: Yes
Slave_SQL_Running: Yes

# pssh -h IP.txt -i -o /tmp/pssh/ uptime
[1] 11:19:47 [SUCCESS] Feb.mars.he
11:19:55 up 4 days, 16:31,  2 users,  load average: 0.02, 0.03, 0.00
[2] 11:19:47 [SUCCESS] Jan.mars.he
11:19:56 up 3 days, 23:30,  0 users,  load average: 0.01, 0.00, 0.00
[3] 11:19:47 [SUCCESS] Mar.mars.he
11:19:56 up 4 days, 16:30,  1 user,  load average: 0.00, 0.00, 0.00

# ll /tmp/pssh/
总用量 12
-rw-r--r--. 1 root root 70 12月  1 11:19 Feb.mars.he
-rw-r--r--. 1 root root 70 12月  1 11:19 Jan.mars.he
-rw-r--r--. 1 root root 69 12月  1 11:19 Mar.mars.he

# cat /tmp/pssh/*
11:19:55 up 4 days, 16:31,  2 users,  load average: 0.02, 0.03, 0.00
11:19:56 up 3 days, 23:30,  0 users,  load average: 0.01, 0.00, 0.00
11:19:56 up 4 days, 16:30,  1 user,  load average: 0.00, 0.00, 0.00

[root@li229-122 ~]# speedtest-cli --list | grep China
1185) China Unicom (Changchun, China) [10534.35 km]
3784) China Mobile (Urumqi, China) [10581.15 km]
2667) Beijing Normal University (Beijing, China) [11117.03 km]
2529) Beijing Normal University (Beijing, China) [11117.03 km]
2816) Capital Online Data service (Beijing, China) [11117.03 km]
4354) SXmobile (Taiyuan, China) [11383.17 km]
3973) China Telecom (Lanzhou, China) [11615.43 km]
3633) China Telecom (Shanghai, China) [11983.37 km]
3927) China Mobile Jiangsu Co., Ltd. (Suzhou, China) [11989.27 km]
2461) China Unicom (Chengdu, China) [12213.35 km]
1028) Shepherd Software (Xiamen, China) [12785.57 km]
1628) Xiamen Guangdian Xinxu (Xiamen, China) [12785.57 km]
3891) GZinternet (Guangzhou, China) [13005.36 km]
3871) SZWCDMA (Shenzhen, China) [13059.20 km]
3819) SZU (Shenzhen, China) [13059.20 km]
1536) STC (Hong Kong, China) [13088.37 km]
1890) Telin (Hong Kong, China) [13088.37 km]

3633) China Telecom (Shanghai, China) [11983.37 km]

3633: 服务器id
china telecom：isp，这里是中国电信
shanghai,china ：服务器所在地址
11983.37 km：两台服务器地理位置之间距离，我这台机器在美国，和上海相距11983.37公里，很远呐.

[root@li229-122 ~]# speedtest-cli --server=3633 --share
Retrieving speedtest.net configuration...
Retrieving speedtest.net server list...
Testing from Linode (173.255.219.122)...
Hosted by China Telecom (Shanghai) [11983.37 km]: 23.603 ms
Testing download speed........................................
Download: 24.84 Mbit/s
Testing upload speed..................................................
Upload: 4.57 Mbit/s
Share results: http://www.speedtest.net/result/3240988007.png

lixi@lixi-desktop:~$ ping -T tsandaddr www.ustc.edu.cn -c 1
PING www.ustc.edu.cn (202.38.64.9) 56(124) bytes of data.
64 bytes from 202.38.64.9: icmp_seq=1 ttl=62 time=0.823 ms
TS:     lixi-desktop.local (210.45.74.25)    12522473 absolute
210.45.74.1    -251
local-gw.ustc.edu.cn (202.38.64.126)    248
202.38.64.9    -857514
Unrecorded hops: 3

--- www.ustc.edu.cn ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 0.823/0.823/0.823/0.000 ms

lixi@lixi-desktop:~# ./clockdiff -o 202.38.64.9
..................................................
host=202.38.64.9 rtt=1(0)ms/1ms delta=-857517ms/-857517ms Wed Dec 17 11:28:30 2008

lixi@lixi-desktop:~# ./clockdiff 202.38.64.9
.
host=202.38.64.9 rtt=750(187)ms/0ms delta=-857517ms/-857517ms Wed Dec 17 11:28:35 2008

lixi@lixi-desktop:~#./clockdiff gigagate1.Princeton.EDU
..................................................
host=gigagate1.Princeton.EDU rtt=307(21)ms/271ms delta=-5ms/-5ms Wed Dec 17 11:50:16 2008

service sshd start
启动 sshd： [确定]

rsync -vzrtopg --progress -e ssh --delete work@172.16.78.192:/www/* /databack/experiment/rsync
work@172.16.78.192's password:
receiving file list ...
5 files to consider
test/
a
0 100% 0.00kB/s 527:35:41 (1, 20.0% of 5)
b
67 100% 65.43kB/s 0:00:00 (2, 40.0% of 5)
c
0 100% 0.00kB/s 527:35:41 (3, 60.0% of 5)
dd
100663296 100% 42.22MB/s 0:00:02 (4, 80.0% of 5)
sent 96 bytes received 98190 bytes 11563.06 bytes/sec
total size is 100663363 speedup is 1024.19

vi /etc/xinetd.d/rsync

#default: off
# description: The rsync server is a good addition to an ftp server, as it \
# allows crc checksumming etc.
service rsync {
disable = no
socket_type = stream
wait = no
user = root
server = /usr/bin/rsync
server_args = --daemon
log_on_failure += USERID
}

/etc/init.d/xinetd restart
停止 xinetd： [确定]
启动 xinetd： [确定]

vi /etc/rsyncd.conf

uid=root
gid=root
max connections=4
log file=/var/log/rsyncd.log
pid file=/var/run/rsyncd.pid
lock file=/var/run/rsyncd.lock
secrets file=/etc/rsyncd.passwd
hosts deny=172.16.78.0/22

[www]
comment= backup web
path=/www
read only = no
exclude=test
auth users=work

echo "work:abc123" > /etc/rsyncd.passwd
chmod 600 /etc/rsyncd.passwd

rsync -avz --progress --delete work@172.16.78.192::www /databack/experiment/rsync

Password:
receiving file list ...
6 files to consider
./ files...
a
0 100% 0.00kB/s 528:20:41 (1, 50.0% of 6)
b
67 100% 65.43kB/s 0:00:00 (2, 66.7% of 6)
c
0 100% 0.00kB/s 528:20:41 (3, 83.3% of 6)
dd
100663296 100% 37.49MB/s 0:00:02 (4, 100.0% of 6)
sent 172 bytes received 98276 bytes 17899.64 bytes/sec
total size is 150995011 speedup is 1533.75

rsync -avz --progress /databack/experiment/rsync/ work@172.16.78.192::www

Password:
building file list ...
6 files to consider
./
a
b
67 100% 0.00kB/s 0:00:00 (2, 66.7% of 6)
c
sent 258 bytes received 76 bytes 95.43 bytes/sec
total size is 150995011 speedup is 452080.87

ngrep -W byline -d lo port 18080

ngrep -W byline -d eth0 port 80

ngrep '[a-zA-Z]' -t -W byline -d any tcp port 18080

ngrep -d3 -N -q \.flv
interface: \Device\TNT_40_1_{670F6B50-0A13-4BAB-9D9E-994A833F5BA9} (10.132.0.0/2
55.255.192.0)
match: \.flv

T(6) 10.132.34.23:24860 -> 61.142.208.154:80 [AP]
GET /f59.c31.56.com/flvdownload/12/19/ggyg7741@56.com_56flv_zhajm_119556973
97.flv HTTP/1.1..accept: */*..Referer: http://www.56.com/flashApp/v_player_
site.swf..x-flash-version: 9,0,45,0..UA-CPU: x86..Accept-Encoding: gzip, de
flate..User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET
CLR 2.0.50727; .NET CLR 3.0.04506.30)..host: f59.r.56.com..Connection: Keep
-Alive..Cookie: whistoryview=23423759-23635627-23423344-23171935-23058374-2
3081156-23207350-22395727-; geoip=............; wl_all_s=y....

T(6) 2007/11/25 15:56:12.192619 10.132.34.23:26365 -> 59.151.21.101:80 [AP]
GET /aa.flv HTTP/1.1.
Accept: */*.
Accept-Language: zh-cn.
UA-CPU: x86.
Accept-Encoding: gzip, deflate.
User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 2.0.5072
7; .NET CLR 3.0.04506.30).
Host: www.google.cn.
Connection: Keep-Alive.
Cookie: PREF=id=a0b2932c336477e9:TB=4:NW=1:TM=1187877372:LM=1187956074:S=Y1Fzndp
rT3vFo7ac; SID=DQAAAHcAAABJCEXeOVLHu2rIfb5BfKP3GG9PbhJDEkXsLTV8y0f_lvSd2Y46Q0FPt
83CnEs9rxA1xBDM9mLR8-ckWeScyOQA8PyYnX5u5OjFvjfRbDg_FDZfwxhRzqS9KPZv26pjnsUxs0FDM
1xpJ5AgDn38pXtlCdkksJ0-cbiIWoA61oHWMg; NID=7=AvJxn5B6YOLLxoYz4LLzhIbNsQUQiulRS6U
JGxdBniQBmXm99y7L-NBNORN82N3unmZSGHFPfePVHnLK2MjYjglyXZhU9x7ETXNBnY3NurNijHDhJ7K
yi7E53UBOcv4V.

info info

?键：它就会显示info的常用快捷键。
N键：显示（相对于本节点的）下一节点的文档内容。
P键：显示（相对于本节点的）前一节点的文档内容。
U键：进入当前命令所在的主题。
M键：敲M键后输入命令的名称就可以查看该命令的帮助文档了。
G键：敲G键后输入主题名称，进入该主题。
L键：回到上一个访问的页面。
SPACE键：向前滚动一页。
BACKUP或DEL键：向后滚动一页。
Q：退出info。

？     显示帮助窗口

在帮助窗口中：
Ctrl-x 0          关闭帮助窗口
Ctrl-x Ctrl-c    关闭整个 Info

q      退出 info
n      打开与本 Node 关联的下一个 Node
p      打开与本 Node 关联的前一个 Node
u      打开与本 Node 关联的上一个 Node
l      回到上一次访问的 Node
m或g   选择一个菜单项（Node 的名字）
输入指定菜单的名字后按回车，打开指定菜单项关联的 Node
空格键 下一页（PageDown 也可以，下一页从当前页的最后两行开始算起）
下一个 Node （若当前页在 Node 文档的末尾）
Del 键 上一页（PageUp 也可以，上一页从当前页的开始两行开始算起）
上一个 Node （若当前页 Node 文档的开始）

b 或 t 或 Home   文档的开始（b 是 begining 的意思）
e 或 End         文档的末尾（b 是 ending 的意思）
Ctrl-l    刷新当前页，若当前文档显示情况有问题时
Ctrl-g    取消所键入的指令

sudo vdfuse -f /path/to/file.vdi /path/to/mountpoint

mount /path/to/mountpoint/Partition1 /path/to/someother/mountpoint

[root@localhost ~]# consoletype
pty

date +"%Y-%m-%d"
2009-12-07

date -d "1 day ago" +"%Y-%m-%d"
2012-11-19

date -d "2 second" +"%Y-%m-%d %H:%M.%S"
2012-11-20 14:21.31

date -d "1970-01-01 1234567890 seconds" +"%Y-%m-%d %H:%m:%S"
2009-02-13 23:02:30

date -d "2009-12-12" +"%Y/%m/%d %H:%M.%S"
2009/12/12 00:00.00

date -d "Dec 5, 2009 12:00:37 AM" +"%Y-%m-%d %H:%M.%S"
2009-12-05 00:00.37

date -d "Dec 5, 2009 12:00:37 AM 2 year ago" +"%Y-%m-%d %H:%M.%S"
2007-12-05 00:00.37

date +%Y%m%d                   //显示前天年月日
date -d "+1 day" +%Y%m%d       //显示前一天的日期
date -d "-1 day" +%Y%m%d       //显示后一天的日期
date -d "-1 month" +%Y%m%d     //显示上一月的日期
date -d "+1 month" +%Y%m%d     //显示下一月的日期
date -d "-1 year" +%Y%m%d      //显示前一年的日期
date -d "+1 year" +%Y%m%d      //显示下一年的日期

date -s                        //设置当前时间，只有root权限才能设置，其他只能查看
date -s 20120523               //设置成20120523，这样会把具体时间设置成空00:00:00
date -s 01:01:01               //设置具体时间，不会对日期做更改
date -s "01:01:01 2012-05-23"  //这样可以设置全部时间
date -s "01:01:01 20120523"    //这样可以设置全部时间
date -s "2012-05-23 01:01:01"  //这样可以设置全部时间
date -s "20120523 01:01:01"    //这样可以设置全部时间

#!/bin/bash

start=$(date +%s)
nmap man.linuxde.net &> /dev/null

end=$(date +%s)
difference=$(( end - start ))
echo $difference seconds.

#!/bin/bash

b=''
for ((i=0;$i<=100;i++))
do
printf "Progress:[%-100s]%d%%\r" $b $i
sleep 0.1
b=#$b
done
echo

[root@localhost ~]# yes testline

testline
testline
testline
testline
testline
testline
testline
testline
...一直重复打印 testline，按Ctrl+C结束。

[root@localhost ~]# md5sum insert.sql
bcda6cb5c704664f989703ac5a88f112  insert.sql

md5sum testfile > testfile.md5

md5sum testfile -c testfile.md5

forsort: OK

forsort: FAILED
md5sum: WARNING: 1 of 1 computed checksum did NOT match

md5sum -w -c testfile.md5

md5sum: testfile.md5: 1: improperly formatted MD5 checksum line
md5sum: testfile.md5: no properly formatted MD5 checksum lines found

[root@localhost ~]# hostid
007f0100


[root@localhost ~]# users
root root

[root@localhost ~]# whoami
root

[root@localhost ~]# id -un
root

[root@localhost ~]# mesg y    #允许系统用户将信息直接显示在你的屏幕上。
[root@localhost ~]# mesg n    #不允许系统用户将信息直接显示在你的屏幕上。

stty iuclc     #开启
stty -iuclc    #恢复

stty olcuc    #开启
stty -olcuc   #恢复

stty size

stty eof "string"

stty -echo   #禁止回显
stty echo    #打开回显

stty -echo;read;stty echo;read

stty igncr     #开启
stty -igncr    #恢复

timeout_read()
{
timeout=$1
old_stty_settings=`stty -g`　　#save current settings
stty -icanon min 0 time 100　　#set 10seconds,not 100seconds
eval read varname　　          #=read $varname
stty "$old_stty_settings"　　  #recover settings
}

read -t 10 varname

[root@localhost ~]# mtools     #显示所有支持的指令名称
Supported commands:
mattrib, mbadblocks, mcat, mcd, mclasserase, mcopy, mdel, mdeltree
mdir, mdoctorfat, mdu, mformat, minfo, mlabel, mmd, mmount
mpartition, mrd, mread, mmove, mren, mshowfat, mtoolstest, mtype
mwrite, mzip


#seq -f"%3g" 9 11
9
10
11

#sed -f"%03g" 9 11
#seq -f"str%03g" 9 11
str009
str010
str011

seq -w 98 101
098
099
100
101

seq -s" " -f"str%03g" 9 11
str009 str010 str011

seq -s"`echo -e "/t"`" 9 11

seq -s"`echo -e "\n"`" 9 11
19293949596979899910911

#!/bin/bash
printf $(tput setaf 2; tput bold)'color show\n\n'$(tput sgr0)

for((i=0; i<=7; i++)); do
echo $(tput setaf $i)"show me the money"$(tput sgr0)
done

printf '\n'$(tput setaf 2; tput setab 0; tput bold)'background color show'$(tput sgr0)'\n\n'

for((i=0,j=7; i<=7; i++,j--)); do
echo $(tput setaf $i; tput setab $j; tput bold)"show me the money"$(tput sgr0)
done

exit 0

#!/bin/bash

# $1 str       print string
# $2 color     0-7 设置颜色
# $3 bgcolor   0-7 设置背景颜色
# $4 bold      0-1 设置粗体
# $5 underline 0-1 设置下划线

function format_output(){
str=$1
color=$2
bgcolor=$3
bold=$4
underline=$5
normal=$(tput sgr0)

case "$color" in
0|1|2|3|4|5|6|7)
setcolor=$(tput setaf $color;) ;;
*)
setcolor="" ;;
esac

case "$bgcolor" in
0|1|2|3|4|5|6|7)
setbgcolor=$(tput setab $bgcolor;) ;;
*)
setbgcolor="" ;;
esac

if [ "$bold" = "1" ]; then
setbold=$(tput bold;)
else
setbold=""
fi

if [ "$underline" = "1" ]; then
setunderline=$(tput smul;)
else
setunderline=""
fi

printf "$setcolor$setbgcolor$setbold$setunderline$str$normal\n"
}

format_output "Yesterday Once more" 2 5 1 1

exit 0

#!/bin/bash
# clear the screen
tput clear
# Move cursor to screen location X,Y (top left is 0,0)
tput cup 3 15
# set a foreground colour using ANSI escape
tput setaf 3
echo "XYX Corp LTD."
tput sgr0
tput cup 5 17
# Set reverse video mode
tput rev
echo "M A I N - M E N U"
tput sgr0
tput cup 7 15
echo "1. User Management"
tput cup 8 15
echo "2. service Management"
tput cup 9 15
echo "3. Process Management"
tput cup 10 15
echo "4. Backup"
# Set bold mode
tput bold
tput cup 12 15
read -p "Enter your choice [1-4] " choice
tput clear
tput sgr0
tput rc

exit 0

[root@AY1307311912260196fcZ satools]# sh -x check_ssh_login.sh
+ DEFINE=30
+ cat /var/log/secure
+ awk '/Failed/ {++ip[$(NF-3)]} END {for (i in ip) print i"="ip[i]}'
++ cat /root/satools/black.txt
+ for i in '`cat /root/satools/black.txt`'
++ echo 121.42.0.16=1427
++ awk -F= '{print $1}'
+ IP=121.42.0.16
++ echo 121.42.0.16=1427
++ awk -F= '{print $2}'
+ NUM=1427
+ '[' 1427 -gt 30 ']'
+ grep 121.42.0.16 /etc/hosts.deny
+ '[' 1 -gt 0 ']'
+ echo sshd:121.42.0.16
+ echo vsftpd:121.42.0.16
+ for i in '`cat /root/satools/black.txt`'
++ echo 121.42.0.72=276
++ awk -F= '{print $1}'
+ IP=121.42.0.72
++ awk -F= '{print $2}'
++ echo 121.42.0.72=276
+ NUM=276
+ '[' 276 -gt 30 ']'
+ grep 121.42.0.72 /etc/hosts.deny
+ '[' 1 -gt 0 ']'
+ echo sshd:121.42.0.72
+ echo vsftpd:121.42.0.72

[root@localhost ~]# fc -l -10     #显示10条历史命令
1039     type -a grep
1040     export
1041     history 10
1042     ulimit -a
1043     shopt
1044     help ls
1045     help env
1046     help short
1047     help shopt
1048     showkey -a

fc 1040                    #编辑第1040条历史命令

[root@localhost ~]# man -k who
at.allow [at]        (5)  - determine who can submit jobs via at or batch
at.deny [at]         (5)  - determine who can submit jobs via at or batch
jwhois               (1)  - client for the whois service
jwhois              (rpm) - Internet whois/nicname client.
Net::LDAP::Extension::whoami (3pm)  - LDAP Who am I? Operation
w                    (1)  - Show who is logged on and what they are doing
who                  (1p)  - display who is on the system
who                  (1)  - show who is logged on
whoami               (1)  - print effective userid

[root@localhost ~]# apropos who
at.allow [at]        (5)  - determine who can submit jobs via at or batch
at.deny [at]         (5)  - determine who can submit jobs via at or batch
jwhois               (1)  - client for the whois service
jwhois              (rpm) - Internet whois/nicname client.
Net::LDAP::Extension::WhoAmI (3pm)  - LDAP Who am I? Operation
w                    (1)  - Show who is logged on and what they are doing
who                  (1p)  - display who is on the system
who                  (1)  - show who is logged on
whoami               (1)  - print effective userid

apropos -a emacs vi

#!/bin/bash
let a=5+4 b=9-3
echo $a $b

#!/bin/bash
let "t1 = ((a = 5 + 3, b = 7 - 1, c = 15 - 4))"
echo "t1 = $t1, a = $a, b = $b"

declare mylove='Visual C++'   #定义新环境变量

set -a mylove                 #设置为环境变量

env | grep mylove             #显示环境变量值

wait %1       #等待作业号为3的作业完成

find / -name password

bg 1            #后台执行任务号为1的任务

find / -name password &     #后台执行任务

command echo Linux            #调用执行shell内部指令

Linux

read 1987name
从标准输入读取输入并赋值给变量1987name。

read first last
从标准输入读取输入到第一个空格或者回车，将输入的第一个单词放到变量first中，并将该行其他的输入放在变量last中。

read
从标准输入读取一行并赋值给特定变量REPLY。

read -a arrayname
把单词清单读入arrayname的数组里。

read -p "text"
打印提示（text），等待输入，并将输入存储在REPLY中。

read -r line
允许输入包含反斜杠。

read -t 3
指定读取等待时间为3秒。

read -n 2 var
从输入中读取两个字符并存入变量var，不需要按回车读取。

read -d ":" var
用定界符“:”结束输入行。

#read 1987name        #等待读取输入，直到回车后表示输入完毕，并将输入赋值给变量answer
HelloWorld            #控制台输入Hello

#echo $1987name       #打印变量
HelloWorld

#read one two three
1 2 3                   #在控制台输入1 2 3，它们之间用空格隔开。

#echo "one = $one, two = $two, three = $three"
one = 1, two = 2, three = 3

#read                  #等待控制台输入，并将结果赋值给特定内置变量REPLY。
This is REPLY          #在控制台输入该行。


#echo $REPLY           #打印输出特定内置变量REPLY，以确认是否被正确赋值。

This is REPLY

#read -p "Enter your name: "            #输出文本提示，同时等待输入，并将结果赋值给REPLY。
Enter you name: stephen                 #在提示文本之后输入stephen

#echo $REPLY
stephen

#read -a friends
Tim Tom Helen

#echo "They are ${friends[0]}, ${friends[1]} and ${friends[2]}."
They are Tim, Tom and Helen.

#!/bin/bash
read -p "输入密码：" -s pwd
echo
echo password read, is "$pwd"

#!/bin/bash
stty -echo
read -p "输入密码：" pwd
stty echo
echo
echo 输入完毕。

read v1 v3          #读取变量值

Linux c+            #输入数据

echo $v1 $v3       #输出变量的值

Linux c+           #输出变量值

bind -x '"\C-l":ls -l'    #直接按 CTRL+L 就列出目录

[root@localhost ~]# showkey -a

Press any keys - Ctrl-D will terminate this program

^[[A     27 0033 0x1b  上
91 0133 0x5b
65 0101 0x41
^[[B     27 0033 0x1b  下
91 0133 0x5b
66 0102 0x42
^[[D     27 0033 0x1b  左
91 0133 0x5b
68 0104 0x44
^[[C     27 0033 0x1b 右
91 0133 0x5b
67 0103 0x43
32 0040 0x20
^M       13 0015 0x0d 字母M
^C        3 0003 0x03 Ctrl-C
^D        4 0004 0x04 Ctrl-D 退出

[root@localhost ~]# readonly     #显示只读变量
declare -ar BASH_VERSINFO='([0]="3" [1]="2" [2]="25" [3]="1" [4]="release" [5]="i686-redhat-linux-gnu")'
declare -ir EUID="0"
declare -ir PPID="31436"
declare -r SHELLOPTS="braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor"
declare -ir UID="0"

[root@localhost ~]# readonly test='ok'         #定义只读变量并初始化

[root@localhost ~]# test='my'                 #试图修改只读变量的值
-bash: test: readonly variable

[root@localhost ~]# ulimit -a
core file size          (blocks, -c) 0           #core文件的最大值为100 blocks。
data seg size           (kbytes, -d) unlimited   #进程的数据段可以任意大。
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited   #文件可以任意大。
pending signals                 (-i) 98304       #最多有98304个待处理的信号。
max locked memory       (kbytes, -l) 32          #一个任务锁住的物理内存的最大值为32KB。
max memory size         (kbytes, -m) unlimited   #一个任务的常驻物理内存的最大值。
open files                      (-n) 1024        #一个任务最多可以同时打开1024的文件。
pipe size            (512 bytes, -p) 8           #管道的最大空间为4096字节。
POSIX message queues     (bytes, -q) 819200      #POSIX的消息队列的最大值为819200字节。
real-time priority              (-r) 0
stack size              (kbytes, -s) 10240       #进程的栈的最大值为10240字节。
cpu time               (seconds, -t) unlimited   #进程使用的CPU时间。
max user processes              (-u) 98304       #当前用户同时打开的进程（包括线程）的最大个数为98304。
virtual memory          (kbytes, -v) unlimited   #没有限制进程的最大地址空间。
file locks                      (-x) unlimited   #所能锁住的文件的最大个数没有限制。

[root@localhost ~]# exit
logout

cd $(dirname $0) || exit 1

if [ "$#" -ne "2" ]; then
echo "usage: $0 <area> <hours>"
exit 2
fi

trap "rm -f tmpfile; echo Bye." EXIT

./mycommand.sh
EXCODE=$?
if [ "$EXCODE" == "0" ]; then
echo "O.K"
fi

jobs -l               #显示当前系统的任务列表

[1] + 1903 运行中          find / -name password &

[root@localhost ~]# enable -a
enable .
enable :
enable [
enable alias
enable bg
enable bind
enable break
enable builtin
enable caller
enable cd
enable command
enable compgen
enable complete
enable continue
enable declare
enable dirs
enable disown
enable echo
enable enable
enable eval
enable exec
enable exit
enable export
enable false
enable fc
enable fg
enable getopts
enable hash
enable help
enable history
enable jobs
enable kill
enable let
enable local
enable logout
enable popd
enable printf
enable pushd
enable pwd
enable read
enable readonly
enable return
enable set
enable shift
enable shopt
enable source
enable suspend
enable test
enable times
enable trap
enable true
enable type
enable typeset
enable ulimit
enable umask
enable unalias
enable unset
enable wait

declare test='man.linuxde.net'    #定义并初始化shell变量

echo $test                        #输出shell变量的值

man.linuxde.net

builtin alias                 #执行shell内部指令
alias cp='cp -i'
alias l.='ls -d .* --color=tty'
alias ll='ls -l --color=tty'
alias ls='ls --color=tty'
alias mv='mv -i'
alias rm='rm -i'
alias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'

shopt           #输出所有可以设置的shell操作选项
cdable_vars     off
cdspell         off
checkhash       off
checkwinsize    on
cmdhist         on
dotglob         off
execfail        off
expand_aliases  on
extdebug        off
...

shopt -s cdspell          #开启cd拼写检查

cdspell on                #开启cdspell选项

[root@localhost ~]# export
declare -x G_BROKEN_FILENAMES="1"
declare -x HISTSIZE="1000"
declare -x HOME="/root"
declare -x hostname="localhost"
declare -x INPUTRC="/etc/inputrc"
declare -x LANG="zh_CN.UTF-8"
declare -x LESSOPEN="|/usr/bin/lesspipe.sh %s"
declare -x logname="root"
declare -x LS_COLORS="no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=01;32:*.cmd=01;32:*.exe=01;32:*.com=01;32:*.btm=01;32:*.bat=01;32:*.sh=01;32:*.csh=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.cpio=01;31:*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:"
declare -x mail="/var/spool/mail/root"
declare -x OLDPWD
declare -x PATH="/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin"
declare -x pwd="/root"
declare -x SHELL="/bin/bash"
declare -x SHLVL="1"
declare -x SSH_CLIENT="192.168.2.111 2705 22"
declare -x SSH_CONNECTION="192.168.2.111 2705 192.168.2.2 22"
declare -x SSH_TTY="/dev/pts/0"
declare -x TERM="linux"
declare -x USER="root"

kill -l
1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL
5) SIGTRAP      6) SIGABRT      7) SIGBUS       8) SIGFPE
9) SIGKILL     10) SIGUSR1     11) SIGSEGV     12) SIGUSR2
13) SIGPIPE     14) SIGALRM     15) SIGTERM     16) SIGSTKFLT
17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP
21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU
25) SIGXFSZ     26) SIGVTALRM   27) SIGPROF     28) SIGWINCH
29) SIGIO       30) SIGPWR      31) SIGSYS      34) SIGRTMIN
35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3  38) SIGRTMIN+4
39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8
43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12
47) SIGRTMIN+13 48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14
51) SIGRTMAX-13 52) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-10
55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7  58) SIGRTMAX-6
59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2
63) SIGRTMAX-1  64) SIGRTMAX

HUP     1    终端断线
INT     2    中断（同 Ctrl + C）
QUIT    3    退出（同 Ctrl + \）
TERM   15    终止
KILL    9    强制终止
CONT   18    继续（与STOP相反， fg/bg命令）
STOP   19    暂停（同 Ctrl + Z）

ps -ef | grep vim
root      3268  2884  0 16:21 pts/1    00:00:00 vim install.log
root      3370  2822  0 16:21 pts/0    00:00:00 grep vim

kill 3268
kill 3268
-bash: kill: (3268) - 没有那个进程

[root@localhost ~]# type ls
ls is aliased to `ls --color=tty'

[root@localhost ~]# type cd
cd is a shell builtin

[root@localhost ~]# type date
date is /bin/date

[root@localhost ~]# type mysql
mysql is /usr/bin/mysql

[root@localhost ~]# type nginx
-bash: type: nginx: not found

[root@localhost ~]# type if
if is a shell keyword

[root@localhost ~]# type which
which is aliased to `alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'

[root@localhost ~]# type -a cd
cd is a shell builtin

[root@localhost ~]# type -a grep
grep is /bin/grep

help shopt                #获取shopt命令的帮助信息
shopt: shopt [-pqsu] [-o long-option] optname [optname...]
Toggle the values of variables controlling optional behavior.
The -s flag means to enable (set) each OPTNAME; the -u flag
unsets each OPTNAME.  The -q flag suppresses output; the exit
status indicates whether each OPTNAME is set or unset.  The -o
option restricts the OPTNAMEs to those defined for use with
`set -o'.  With no options, or with the -p option, a list of all
settable options is displayed, with an indication of whether or
not each is set.

[root@localhost ~]# history 10
92  ls
93  cd ..
94  ls
95  exit
96  ls -a
97  cd .ssh/
98  ls
99  cat known_hosts
100  exit
101  history 10

fg 1          #将任务转换到前台执行

find / -name password       #前台执行命令

echo Linux C++           #输出指定信息

Linux C++                #输出信息

exec -c echo Linux C++          #调用命令

Linux C++                       #使用指定指令输出信息

unalias cc            #取消已经设置的命令别名

cc：no input files

[root@localhost ~]# env
hostname=LinServ-1
TERM=linux
SHELL=/bin/bash
HISTSIZE=1000
SSH_CLIENT=192.168.2.111 2705 22
SSH_TTY=/dev/pts/0
USER=root
LS_COLORS=no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=01;32:*.cmd=01;32:*.exe=01;32:*.com=01;32:*.btm=01;32:*.bat=01;32:*.sh=01;32:*.csh=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.cpio=01;31:*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:
mail=/var/spool/mail/root
PATH=/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin
INPUTRC=/etc/inputrc
pwd=/root
LANG=zh_CN.UTF-8
SHLVL=1
HOME=/root
logname=root
SSH_CONNECTION=192.168.2.111 2705 192.168.2.2 22
LESSOPEN=|/usr/bin/lesspipe.sh %s
G_BROKEN_FILENAMES=1
_=/bin/env

unset -v mylove         #删除指定的环境变量

apt-key list          #列出已保存在系统中key。
apt-key add keyname   #把下载的key添加到本地trusted数据库中。
apt-key del keyname   #从本地trusted数据库删除key。
apt-key update        #更新本地trusted数据库，删除过期没用的key。

dpkg -i package.deb     #安装包
dpkg -r package         #删除包
dpkg -P package         #删除包（包括配置文件）
dpkg -L package         #列出与该包关联的文件
dpkg -l package         #显示该包的版本
dpkg --unpack package.deb  #解开deb包的内容
dpkg -S keyword            #搜索所属的包内容
dpkg -l                    #列出当前已安装的包
dpkg -c package.deb        #列出deb包的内容
dpkg --configure package   #配置包

echo -e "\e[1;31mThis is red text\e[0m"
This is red text

echo -e "\e[1;42mGreed Background\e[0m"
Greed Background

echo -e "\033[37;31;5mMySQL Server Stop...\033[39;49;0m"


alias 新的命令='原命令 -选项/参数'

alias -p
alias cp='cp -i'
alias l.='ls -d .* --color=tty'
alias ll='ls -l --color=tty'
alias ls='ls --color=tty'
alias mv='mv -i'
alias rm='rm -i'
alias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'


sudo dpkg-reconfigure locales

chkconfig --list             #列出所有的系统服务。
chkconfig --add httpd        #增加httpd服务。
chkconfig --del httpd        #删除httpd服务。
chkconfig --level httpd 2345 on        #设置httpd在运行级别为2、3、4、5的情况下都是on（开启）的状态。
chkconfig --list               #列出系统所有的服务启动情况。
chkconfig --list mysqld        #列出mysqld服务设置情况。
chkconfig --level 35 mysqld on #设定mysqld在等级3和5为开机运行服务，--level 35表示操作只在等级3和5执行，on表示启动，off表示关闭。
chkconfig mysqld on            #设定mysqld在各等级为on，“各等级”包括2、3、4、5等级。

aptitude update            #更新可用的包列表
aptitude upgrade           #升级可用的包
aptitude dist-upgrade      #将系统升级到新的发行版
aptitude install pkgname   #安装包
aptitude remove pkgname    #删除包
aptitude purge pkgname     #删除包及其配置文件
aptitude search string     #搜索包
aptitude show pkgname      #显示包的详细信息
aptitude clean             #删除下载的包文件
aptitude autoclean         #仅删除过期的包文件

deb [web或ftp地址] [发行版名字] [main/contrib/non-free]

apt-get update

apt-get install packagename

apt-get remove packagename

apt-get –purge remove packagename

apt-get autoclean apt

apt-get clean

apt-get upgrade

apt-get dist-upgrade

apt-get autoclean

yum install              #全部安装
yum install package1     #安装指定的安装包package1
yum groupinsall group1   #安装程序组group1

yum update               #全部更新
yum update package1      #更新指定程序包package1
yum check-update         #检查可更新的程序
yum upgrade package1     #升级指定程序包package1
yum groupupdate group1   #升级程序组group1

yum info package1      #显示安装包信息package1
yum list               #显示所有已经安装和可以安装的程序包
yum list package1      #显示指定程序包安装情况package1
yum groupinfo group1   #显示程序组group1信息yum search string 根据关键字string查找安装包

yum remove &#124; erase package1   #删除程序包package1
yum groupremove group1             #删除程序组group1
yum deplist package1               #查看程序package1依赖情况

yum clean packages       #清除缓存目录下的软件包
yum clean headers        #清除缓存目录下的 headers
yum clean oldheaders     #清除缓存目录下旧的 headers

rpm -ivh your-package.rpm

... conflict with ...

... is needed by ...
... is not installed ...

rpm -i your-package.src.rpm
cd /usr/src/redhat/SPECS
rpmbuild -bp your-package.specs             #一个和你的软件包同名的specs文件
cd /usr/src/redhat/BUILD/your-package/      #一个和你的软件包同名的目录
./configure                                 #这一步和编译普通的源码软件一样，可以加上参数
make
make install

rpm -i you-package.src.rpm
cd /usr/src/redhat/SPECS

rpmbuild -bb your-package.specs       #一个和你的软件包同名的specs文件

rpm -e proftpd-1.2.8-1
rpm -e proftpd-1.2.8
rpm -e proftpd-
rpm -e proftpd

rpm -e proftpd-1.2.8-1.i386.rpm
rpm -e proftpd-1.2.8-1.i386
rpm -e proftpd-1.2
rpm -e proftpd-1

... is needed by ...

rpm2cpio xxx.rpm | cpio -vi
rpm2cpio xxx.rpm | cpio -idmv
rpm2cpio xxx.rpm | cpio --extract --make-directories

rpm -qa 讲列出所有安装过的包

rpm -qa | grep sql

rpm -q mysql

rpm -ql 包名

which mysql

rpm -qf `which 程序名`    #返回软件包的全名
rpm -qif `which 程序名`   #返回软件包的有关信息
rpm -qlf `which 程序名`   #返回软件包的文件列表

whereis ftptop
ftptop: /usr/bin/ftptop /usr/share/man/man1/ftptop.1.gz

rpm -qf /usr/bin/ftptop
proftpd-1.2.8-1

rpm -qf /usr/share/doc/proftpd-1.2.8/rfc/rfc0959.txt
proftpd-1.2.8-1

rpm2cpio ../libstdc++-4.3.0-8.i386.rpm | cpio -idv

sudo dpkg-statoverride --update --add nagios nagios 751 /var/lib/nagios3

sudo dpkg-statoverride --force --update --add root sasl 755 /var/spool/postfix/var/run/saslauthd

sudo dpkg-statoverride --remove /usr/bin/wall

rpmbuild -ba 'spec文件路径'

dpkg-deb -x drcom-pum_1.0-0ubuntu1~ppa1~jaunty1_i386.deb drcom

dpkg-deb -e drcom-pum_1.0-0ubuntu1~ppa1~jaunty1_i386.deb drcom/DEBIAN

dpkg-deb -b drcom drcom_1.4.8.2_i386.deb

dpkg-deb -c demo.deb

[root@localhost test]$ cat main.cpp
#include <iostream>
using std::cout;
using std::endl;
void my_print();

int main(int argc, char *argv[])
{
my_print();
cout<<"hello!"<<endl;
return 0;
}

void  my_print()
{
cout<<"print!"<<endl;
}

[root@localhost test]$ g++ main.cpp -o main
[root@localhost test]$ g++ -g main.cpp -o main.debug

[root@localhost test]$ ls -l
总计 64
-rwxr-xr-x 1 quietheart quietheart  6700 07-07 18:04 main
-rw-r--r-- 1 quietheart quietheart   201 07-07 18:02 main.cpp
-rwxr-xr-x 1 quietheart quietheart 38932 07-07 18:04 main.debug

//myfile.h
#ifndef __MYFILE_H
#define __MYFILE_H
void printInfo();
#endif

//myfile.cpp
#include "myfile.h"
#include <iostream>
using std::cout;
using std::endl;
void printInfo()
{
cout<<"hello"<<endl;
}

[root@localhost test]$ g++ -c myfile.cpp
[root@localhost test]$ g++ -shared -fPCI -o libmy.so myfile.o
[root@localhost test]$ ar -r libmy.a myfile.o
ar: creating libmy.a

-rw-r--r-- 1 quietheart quietheart 2154 07-08 16:14 libmy.a
-rwxr-xr-x 1 quietheart quietheart 5707 07-08 16:08 libmy.so
-rwxr-xr-x 1 quietheart quietheart  117 07-08 16:06 myfile.cpp
-rwxr-xr-x 1 quietheart quietheart   63 07-08 16:08 myfile.h
-rw-r--r-- 1 quietheart quietheart 2004 07-08 16:08 myfile.o
libmy.a  libmy.so  myfile.cpp  myfile.h  myfile.o

[root@localhost test]$ readelf -h main
ELF Header:
Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00
Class:                             ELF32
Data:                              2's complement, little endian
Version:                           1 (current)
OS/ABI:                            UNIX - System V
ABI Version:                       0
type:                              exec (Executable file)
Machine:                           Intel 80386
Version:                           0x1
Entry point address:               0x8048580
Start of program headers:          52 (bytes into file)
Start of section headers:          3232 (bytes into file)
Flags:                             0x0
Size of this header:               52 (bytes)
Size of program headers:           32 (bytes)
Number of program headers:         8
Size of section headers:           40 (bytes)
Number of section headers:         29
Section header string table index: 26

[root@localhost test]$ readelf -h myfile.o
ELF Header:
Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00
Class:                             ELF32
Data:                              2's complement, little endian
Version:                           1 (current)
OS/ABI:                            UNIX - System V
ABI Version:                       0
Type:                              REL (Relocatable file)
Machine:                           Intel 80386
Version:                           0x1
Entry point address:               0x0
Start of program headers:          0 (bytes into file)
Start of section headers:          516 (bytes into file)
Flags:                             0x0
Size of this header:               52 (bytes)
Size of program headers:           0 (bytes)
Number of program headers:         0
Size of section headers:           40 (bytes)
Number of section headers:         15
Section header string table index: 12

[root@localhost test]$ readelf -h libmy.a
File: libmy.a(myfile.o)
ELF Header:
Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00
Class:                             ELF32
Data:                              2's complement, little endian
Version:                           1 (current)
OS/ABI:                            UNIX - System V
ABI Version:                       0
Type:                              REL (Relocatable file)
Machine:                           Intel 80386
Version:                           0x1
Entry point address:               0x0
Start of program headers:          0 (bytes into file)
Start of section headers:          516 (bytes into file)
Flags:                             0x0
Size of this header:               52 (bytes)
Size of program headers:           0 (bytes)
Number of program headers:         0
Size of section headers:           40 (bytes)
Number of section headers:         15
Section header string table index: 12

[root@localhost test]$ readelf -h libmy.so
ELF Header:
Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00
Class:                             ELF32
Data:                              2's complement, little endian
Version:                           1 (current)
OS/ABI:                            UNIX - System V
ABI Version:                       0
Type:                              DYN (Shared object file)
Machine:                           Intel 80386
Version:                           0x1
Entry point address:               0x550
Start of program headers:          52 (bytes into file)
Start of section headers:          2768 (bytes into file)
Flags:                             0x0
Size of this header:               52 (bytes)
Size of program headers:           32 (bytes)
Number of program headers:         5
Size of section headers:           40 (bytes)
Number of section headers:         27
Section header string table index: 24

[root@localhost test]$ readelf -l main
Elf file type is EXEC (Executable file)
Entry point 0x8048580
There are 8 program headers, starting at offset 52

Program Headers:
Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
PHDR           0x000034 0x08048034 0x08048034 0x00100 0x00100 R E 0x4
INTERP         0x000134 0x08048134 0x08048134 0x00013 0x00013 R   0x1
[Requesting program interpreter: /lib/ld-linux.so.2]
LOAD           0x000000 0x08048000 0x08048000 0x00970 0x00970 R E 0x1000
LOAD           0x000970 0x08049970 0x08049970 0x00130 0x001c8 RW  0x1000
DYNAMIC        0x000988 0x08049988 0x08049988 0x000e0 0x000e0 RW  0x4
NOTE           0x000148 0x08048148 0x08048148 0x00020 0x00020 R   0x4
GNU_EH_FRAME   0x000820 0x08048820 0x08048820 0x00044 0x00044 R   0x4
GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x4

Section to Segment mapping:
Segment Sections...
00
01     .interp
02     .interp .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .text .fini .rodata .eh_frame_hdr .eh_frame
03     .ctors .dtors .jcr .dynamic .got .got.plt .data .bss
04     .dynamic
05     .note.ABI-tag
06     .eh_frame_hdr
07

[root@localhost test]$ readelf -l myfile.o
There are no program headers in this file.

[root@localhost test]$ readelf -l libmy.a
File: libmy.a(myfile.o)
There are no program headers in this file.

[root@localhost test]$ readelf -l libmy.so
Elf file type is DYN (Shared object file)
Entry point 0x550
There are 5 program headers, starting at offset 52

Program Headers:
Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
LOAD           0x000000 0x00000000 0x00000000 0x007f4 0x007f4 R E 0x1000
LOAD           0x0007f4 0x000017f4 0x000017f4 0x0011c 0x00128 RW  0x1000
DYNAMIC        0x000810 0x00001810 0x00001810 0x000e0 0x000e0 RW  0x4
GNU_EH_FRAME   0x000738 0x00000738 0x00000738 0x0002c 0x0002c R   0x4
GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x4

Section to Segment mapping:
Segment Sections...
00     .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .text .fini .rodata .eh_frame_hdr .eh_frame
01     .ctors .dtors .jcr .data.rel.ro .dynamic .got .got.plt .bss
02     .dynamic
03     .eh_frame_hdr
04

[root@localhost test]$ readelf -S main
There are 29 section headers, starting at offset 0xca0:
Section Headers:
[Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
[ 0]                   NULL            00000000 000000 000000 00      0   0  0
[ 1] .interp           PROGBITS        08048134 000134 000013 00   A  0   0  1
[ 2] .note.ABI-tag     NOTE            08048148 000148 000020 00   A  0   0  4
[ 3] .gnu.hash         GNU_HASH        08048168 000168 000030 04   A  4   0  4
[ 4] .dynsym           DYNSYM          08048198 000198 0000d0 10   A  5   1  4
[ 5] .dynstr           STRTAB          08048268 000268 000183 00   A  0   0  1
[ 6] .gnu.version      VERSYM          080483ec 0003ec 00001a 02   A  4   0  2
[ 7] .gnu.version_r    VERNEED         08048408 000408 000060 00   A  5   2  4
[ 8] .rel.dyn          REL             08048468 000468 000010 08   A  4   0  4
[ 9] .rel.plt          REL             08048478 000478 000048 08   A  4  11  4
[10] .init             PROGBITS        080484c0 0004c0 000017 00  AX  0   0  4
[11] .plt              PROGBITS        080484d8 0004d8 0000a0 04  AX  0   0  4
[12] .text             PROGBITS        08048580 000580 000268 00  AX  0   0 16
[13] .fini             PROGBITS        080487e8 0007e8 00001c 00  AX  0   0  4
[14] .rodata           PROGBITS        08048804 000804 00001a 00   A  0   0  4
[15] .eh_frame_hdr     PROGBITS        08048820 000820 000044 00   A  0   0  4
[16] .eh_frame         PROGBITS        08048864 000864 00010c 00   A  0   0  4
[17] .ctors            PROGBITS        08049970 000970 00000c 00  WA  0   0  4
[18] .dtors            PROGBITS        0804997c 00097c 000008 00  WA  0   0  4
[19] .jcr              PROGBITS        08049984 000984 000004 00  WA  0   0  4
[20] .dynamic          DYNAMIC         08049988 000988 0000e0 08  WA  5   0  4
[21] .got              PROGBITS        08049a68 000a68 000004 04  WA  0   0  4
[22] .got.plt          PROGBITS        08049a6c 000a6c 000030 04  WA  0   0  4
[23] .data             PROGBITS        08049a9c 000a9c 000004 00  WA  0   0  4
[24] .bss              NOBITS          08049aa0 000aa0 000098 00  WA  0   0  8
[25] .comment          PROGBITS        00000000 000aa0 000114 00      0   0  1
[26] .shstrtab         STRTAB          00000000 000bb4 0000e9 00      0   0  1
[27] .symtab           SYMTAB          00000000 001128 000510 10     28  53  4
[28] .strtab           STRTAB          00000000 001638 0003f4 00      0   0  1
Key to Flags:
W (write), A (alloc), X (execute), M (merge), S (strings)
I (info), L (link order), G (group), x (unknown)
O (extra OS processing required) o (OS specific), p (processor specific)

[root@localhost test]$ readelf -S main.debug
There are 37 section headers, starting at offset 0x88c8:

Section Headers:
[Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
[ 0]                   NULL            00000000 000000 000000 00      0   0  0
[ 1] .interp           PROGBITS        08048134 000134 000013 00   A  0   0  1
[ 2] .note.ABI-tag     NOTE            08048148 000148 000020 00   A  0   0  4
[ 3] .gnu.hash         GNU_HASH        08048168 000168 000030 04   A  4   0  4
[ 4] .dynsym           DYNSYM          08048198 000198 0000d0 10   A  5   1  4
[ 5] .dynstr           STRTAB          08048268 000268 000183 00   A  0   0  1
[ 6] .gnu.version      VERSYM          080483ec 0003ec 00001a 02   A  4   0  2
[ 7] .gnu.version_r    VERNEED         08048408 000408 000060 00   A  5   2  4
[ 8] .rel.dyn          REL             08048468 000468 000010 08   A  4   0  4
[ 9] .rel.plt          REL             08048478 000478 000048 08   A  4  11  4
[10] .init             PROGBITS        080484c0 0004c0 000017 00  AX  0   0  4
[11] .plt              PROGBITS        080484d8 0004d8 0000a0 04  AX  0   0  4
[12] .text             PROGBITS        08048580 000580 000268 00  AX  0   0 16
[13] .fini             PROGBITS        080487e8 0007e8 00001c 00  AX  0   0  4
[14] .rodata           PROGBITS        08048804 000804 00001a 00   A  0   0  4
[15] .eh_frame_hdr     PROGBITS        08048820 000820 000044 00   A  0   0  4
[16] .eh_frame         PROGBITS        08048864 000864 00010c 00   A  0   0  4
[17] .ctors            PROGBITS        08049970 000970 00000c 00  WA  0   0  4
[18] .dtors            PROGBITS        0804997c 00097c 000008 00  WA  0   0  4
[19] .jcr              PROGBITS        08049984 000984 000004 00  WA  0   0  4
[20] .dynamic          DYNAMIC         08049988 000988 0000e0 08  WA  5   0  4
[21] .got              PROGBITS        08049a68 000a68 000004 04  WA  0   0  4
[22] .got.plt          PROGBITS        08049a6c 000a6c 000030 04  WA  0   0  4
[23] .data             PROGBITS        08049a9c 000a9c 000004 00  WA  0   0  4
[24] .bss              NOBITS          08049aa0 000aa0 000098 00  WA  0   0  8
[25] .comment          PROGBITS        00000000 000aa0 000114 00      0   0  1
[26] .debug_aranges    PROGBITS        00000000 000bb4 000020 00      0   0  1
[27] .debug_pubnames   PROGBITS        00000000 000bd4 000028 00      0   0  1
[28] .debug_info       PROGBITS        00000000 000bfc 0067aa 00      0   0  1
[29] .debug_abbrev     PROGBITS        00000000 0073a6 000726 00      0   0  1
[30] .debug_line       PROGBITS        00000000 007acc 0003e1 00      0   0  1
[31] .debug_frame      PROGBITS        00000000 007eb0 00009c 00      0   0  4
[32] .debug_str        PROGBITS        00000000 007f4c 000735 00      0   0  1
[33] .debug_loc        PROGBITS        00000000 008681 0000f3 00      0   0  1
[34] .shstrtab         STRTAB          00000000 008774 000151 00      0   0  1
[35] .symtab           SYMTAB          00000000 008e90 000590 10     36  61  4
[36] .strtab           STRTAB          00000000 009420 0003f4 00      0   0  1
Key to Flags:
W (write), A (alloc), X (execute), M (merge), S (strings)
I (info), L (link order), G (group), x (unknown)
O (extra OS processing required) o (OS specific), p (processor specific)

[root@localhost test]$ readelf -S myfile.o
There are 15 section headers, starting at offset 0x204:

Section Headers:
[Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
[ 0]                   NULL            00000000 000000 000000 00      0   0  0
[ 1] .text             PROGBITS        00000000 000034 00009e 00  AX  0   0  4
[ 2] .rel.text         REL             00000000 000744 000060 08     13   1  4
[ 3] .data             PROGBITS        00000000 0000d4 000000 00  WA  0   0  4
[ 4] .bss              NOBITS          00000000 0000d4 000001 00  WA  0   0  4
[ 5] .ctors            PROGBITS        00000000 0000d4 000004 00  WA  0   0  4
[ 6] .rel.ctors        REL             00000000 0007a4 000008 08     13   5  4
[ 7] .rodata           PROGBITS        00000000 0000d8 000006 00   A  0   0  1
[ 8] .eh_frame         PROGBITS        00000000 0000e0 00008c 00   A  0   0  4
[ 9] .rel.eh_frame     REL             00000000 0007ac 000028 08     13   8  4
[10] .comment          PROGBITS        00000000 00016c 00002e 00      0   0  1
[11] .note.GNU-stack   PROGBITS        00000000 00019a 000000 00      0   0  1
[12] .shstrtab         STRTAB          00000000 00019a 00006a 00      0   0  1
[13] .symtab           SYMTAB          00000000 00045c 000180 10     14  14  4
[14] .strtab           STRTAB          00000000 0005dc 000166 00      0   0  1
Key to Flags:
W (write), A (alloc), X (execute), M (merge), S (strings)
I (info), L (link order), G (group), x (unknown)
O (extra OS processing required) o (OS specific), p (processor specific)



[root@localhost test]$ readelf -S libmy.a
File: libmy.a(myfile.o)
There are 15 section headers, starting at offset 0x204:

Section Headers:
[Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
[ 0]                   NULL            00000000 000000 000000 00      0   0  0
[ 1] .text             PROGBITS        00000000 000034 00009e 00  AX  0   0  4
[ 2] .rel.text         REL             00000000 000744 000060 08     13   1  4
[ 3] .data             PROGBITS        00000000 0000d4 000000 00  WA  0   0  4
[ 4] .bss              NOBITS          00000000 0000d4 000001 00  WA  0   0  4
[ 5] .ctors            PROGBITS        00000000 0000d4 000004 00  WA  0   0  4
[ 6] .rel.ctors        REL             00000000 0007a4 000008 08     13   5  4
[ 7] .rodata           PROGBITS        00000000 0000d8 000006 00   A  0   0  1
[ 8] .eh_frame         PROGBITS        00000000 0000e0 00008c 00   A  0   0  4
[ 9] .rel.eh_frame     REL             00000000 0007ac 000028 08     13   8  4
[10] .comment          PROGBITS        00000000 00016c 00002e 00      0   0  1
[11] .note.GNU-stack   PROGBITS        00000000 00019a 000000 00      0   0  1
[12] .shstrtab         STRTAB          00000000 00019a 00006a 00      0   0  1
[13] .symtab           SYMTAB          00000000 00045c 000180 10     14  14  4
[14] .strtab           STRTAB          00000000 0005dc 000166 00      0   0  1
Key to Flags:
W (write), A (alloc), X (execute), M (merge), S (strings)
I (info), L (link order), G (group), x (unknown)
O (extra OS processing required) o (OS specific), p (processor specific)

[root@localhost test]$ readelf -S libmy.so
There are 27 section headers, starting at offset 0xad0:

Section Headers:
[Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
[ 0]                   NULL            00000000 000000 000000 00      0   0  0
[ 1] .gnu.hash         GNU_HASH        000000d4 0000d4 00003c 04   A  2   0  4
[ 2] .dynsym           DYNSYM          00000110 000110 000120 10   A  3   1  4
[ 3] .dynstr           STRTAB          00000230 000230 000199 00   A  0   0  1
[ 4] .gnu.version      VERSYM          000003ca 0003ca 000024 02   A  2   0  2
[ 5] .gnu.version_r    VERNEED         000003f0 0003f0 000050 00   A  3   2  4
[ 6] .rel.dyn          REL             00000440 000440 0000b0 08   A  2   0  4
[ 7] .rel.plt          REL             000004f0 0004f0 000010 08   A  2   9  4
[ 8] .init             PROGBITS        00000500 000500 000017 00  AX  0   0  4
[ 9] .plt              PROGBITS        00000518 000518 000030 04  AX  0   0  4
[10] .text             PROGBITS        00000550 000550 0001c4 00  AX  0   0 16
[11] .fini             PROGBITS        00000714 000714 00001c 00  AX  0   0  4
[12] .rodata           PROGBITS        00000730 000730 000006 00   A  0   0  1
[13] .eh_frame_hdr     PROGBITS        00000738 000738 00002c 00   A  0   0  4
[14] .eh_frame         PROGBITS        00000764 000764 000090 00   A  0   0  4
[15] .ctors            PROGBITS        000017f4 0007f4 00000c 00  WA  0   0  4
[16] .dtors            PROGBITS        00001800 000800 000008 00  WA  0   0  4
[17] .jcr              PROGBITS        00001808 000808 000004 00  WA  0   0  4
[18] .data.rel.ro      PROGBITS        0000180c 00080c 000004 00  WA  0   0  4
[19] .dynamic          DYNAMIC         00001810 000810 0000e0 08  WA  3   0  4
[20] .got              PROGBITS        000018f0 0008f0 00000c 04  WA  0   0  4
[21] .got.plt          PROGBITS        000018fc 0008fc 000014 04  WA  0   0  4
[22] .bss              NOBITS          00001910 000910 00000c 00  WA  0   0  4
[23] .comment          PROGBITS        00000000 000910 0000e6 00      0   0  1
[24] .shstrtab         STRTAB          00000000 0009f6 0000da 00      0   0  1
[25] .symtab           SYMTAB          00000000 000f08 000410 10     26  48  4
[26] .strtab           STRTAB          00000000 001318 000333 00      0   0  1
Key to Flags:
W (write), A (alloc), X (execute), M (merge), S (strings)
I (info), L (link order), G (group), x (unknown)
O (extra OS processing required) o (OS specific), p (processor specific)

dpkg-query -S file1

dpkg-query -W --showformat='${Package} ${Version}\n' > filename

dpkg-query -s capistrano

dpkg-query -L capistrano

dpkg-query -l

dpkg-query -W -f='${Status} ${Version}\n' apache-perl

dpkg-split -s foo.deb

dpkg-split -j "foo*"

[root@localhost ~]# rpmquery -qf /usr/bin/htpasswd
httpd-2.2.3-81.el5.centos

dpkg-preconfigure /var/cache/apt/archives/mysql-server-5.5*.deb

dpkg-divert --package wibble --divert /usr/bin/example.foo --rename /usr/bin/example

dpkg-divert --package wibble --rename --remove /usr/bin/example

dpkg-divert --rename --remove /usr/bin/example

dpkg-divert --divert /usr/bin/example.foo --rename /usr/bin/example

pstree -p work | grep ad
sshd(22669)---bash(22670)---ad_preprocess(4551)-+-{ad_preprocess}(4552)
|-{ad_preprocess}(4553)
|-{ad_preprocess}(4554)
|-{ad_preprocess}(4555)
|-{ad_preprocess}(4556)
`-{ad_preprocess}(4557)

ps -Lf 4551
UID        PID  PPID   LWP  C NLWP STIME TTY      stat   time CMD
work      4551 22670  4551  2    7 16:30 pts/2    Sl+    0:02 ./ad_preprocess
work      4551 22670  4552  0    7 16:30 pts/2    Sl+    0:00 ./ad_preprocess
work      4551 22670  4553  0    7 16:30 pts/2    Sl+    0:00 ./ad_preprocess
work      4551 22670  4554  0    7 16:30 pts/2    Sl+    0:00 ./ad_preprocess
work      4551 22670  4555  0    7 16:30 pts/2    Sl+    0:00 ./ad_preprocess
work      4551 22670  4556  0    7 16:30 pts/2    Sl+    0:00 ./ad_preprocess
work      4551 22670  4557  0    7 16:30 pts/2    Sl+    0:00 ./ad_preprocess

pstack 4551
Thread 7 (Thread 1084229984 (LWP 4552)):
#0  0x000000302afc63dc in epoll_wait () from /lib64/tls/libc.so.6
#1  0x00000000006f0730 in ub::EPollEx::poll ()
#2  0x00000000006f172a in ub::NetReactor::callback ()
#3  0x00000000006fbbbb in ub::UBTask::CALLBACK ()
#4  0x000000302b80610a in start_thread () from /lib64/tls/libpthread.so.0
#5  0x000000302afc6003 in clone () from /lib64/tls/libc.so.6
#6  0x0000000000000000 in ?? ()
Thread 6 (Thread 1094719840 (LWP 4553)):
#0  0x000000302afc63dc in epoll_wait () from /lib64/tls/libc.so.6
#1  0x00000000006f0730 in ub::EPollEx::poll ()
#2  0x00000000006f172a in ub::NetReactor::callback ()
#3  0x00000000006fbbbb in ub::UBTask::CALLBACK ()
#4  0x000000302b80610a in start_thread () from /lib64/tls/libpthread.so.0
#5  0x000000302afc6003 in clone () from /lib64/tls/libc.so.6
#6  0x0000000000000000 in ?? ()
Thread 5 (Thread 1105209696 (LWP 4554)):
#0  0x000000302b80baa5 in __nanosleep_nocancel ()
#1  0x000000000079e758 in comcm::ms_sleep ()
#2  0x00000000006c8581 in ub::UbClientManager::healthyCheck ()
#3  0x00000000006c8471 in ub::UbClientManager::start_healthy_check ()
#4  0x000000302b80610a in start_thread () from /lib64/tls/libpthread.so.0
#5  0x000000302afc6003 in clone () from /lib64/tls/libc.so.6
#6  0x0000000000000000 in ?? ()
Thread 4 (Thread 1115699552 (LWP 4555)):
#0  0x000000302b80baa5 in __nanosleep_nocancel ()
#1  0x0000000000482b0e in armor::armor_check_thread ()
#2  0x000000302b80610a in start_thread () from /lib64/tls/libpthread.so.0
#3  0x000000302afc6003 in clone () from /lib64/tls/libc.so.6
#4  0x0000000000000000 in ?? ()
Thread 3 (Thread 1126189408 (LWP 4556)):
#0  0x000000302af8f1a5 in __nanosleep_nocancel () from /lib64/tls/libc.so.6
#1  0x000000302af8f010 in sleep () from /lib64/tls/libc.so.6
#2  0x000000000044c972 in Business_config_manager::run ()
#3  0x0000000000457b83 in Thread::run_thread ()
#4  0x000000302b80610a in start_thread () from /lib64/tls/libpthread.so.0
#5  0x000000302afc6003 in clone () from /lib64/tls/libc.so.6
#6  0x0000000000000000 in ?? ()
Thread 2 (Thread 1136679264 (LWP 4557)):
#0  0x000000302af8f1a5 in __nanosleep_nocancel () from /lib64/tls/libc.so.6
#1  0x000000302af8f010 in sleep () from /lib64/tls/libc.so.6
#2  0x00000000004524bb in Process_thread::sleep_period ()
#3  0x0000000000452641 in Process_thread::run ()
#4  0x0000000000457b83 in Thread::run_thread ()
#5  0x000000302b80610a in start_thread () from /lib64/tls/libpthread.so.0
#6  0x000000302afc6003 in clone () from /lib64/tls/libc.so.6
#7  0x0000000000000000 in ?? ()
Thread 1 (Thread 182894129792 (LWP 4551)):
#0  0x000000302af8f1a5 in __nanosleep_nocancel () from /lib64/tls/libc.so.6
#1  0x000000302af8f010 in sleep () from /lib64/tls/libc.so.6
#2  0x0000000000420d79 in Ad_preprocess::run ()
#3  0x0000000000450ad0 in main ()

[root@localhost test]# nl mytest.cpp

void printTest() {
char a;
a = 'a';
}

void printTest2() {
int a = 2;
a+=2;
}

[root@localhost test]# g++ -c -g mytest.cpp

[root@localhost test]# objdump -V
GNU objdump 2.17.50.0.6-14.el5 20061020
Copyright 2005 free Software Foundation, Inc.
This program is free software; you may redistribute it under the terms of
the GNU General Public License.  This program has absolutely no warranty.

[root@localhost test]# objdump -a libmy2.a
In archive libmy2.a:
myfile.o:     file format elf32-i386
rwxrwxrwx 0/0   2724 Nov 16 16:06 2009 myfile.o
mytest.o:     file format elf32-i386
rw-r--r-- 0/0    727 Jul 13 15:32 2011 mytest.o

[root@localhost test]# ar -tv libmy2.a
rwxrwxrwx 0/0   2724 Nov 16 16:06 2009 myfile.o
rw-r--r-- 0/0    727 Jul 13 15:32 2011 mytest.o

[root@localhost test]# objdump -i
BFD header file version 2.17.50.0.6-14.el5 20061020
elf32-i386
(header little endian, data little endian)
i386
a.out-i386-linux
(header little endian, data little endian)
i386
efi-app-ia32
(header little endian, data little endian)
i386
elf64-x86-64
(header little endian, data little endian)
i386
elf64-little
(header little endian, data little endian)
i386
elf64-big
(header big endian, data big endian)
i386
elf32-little
(header little endian, data little endian)
i386
elf32-big
(header big endian, data big endian)
i386
srec
(header endianness unknown, data endianness unknown)
i386
symbolsrec
(header endianness unknown, data endianness unknown)
i386
tekhex
(header endianness unknown, data endianness unknown)
i386
binary
(header endianness unknown, data endianness unknown)
i386
ihex
(header endianness unknown, data endianness unknown)
i386
trad-core
(header endianness unknown, data endianness unknown)

elf32-i386 a.out-i386-linux efi-app-ia32 elf64-x86-64
i386 elf32-i386 a.out-i386-linux efi-app-ia32 elf64-x86-64

elf64-little elf64-big elf32-little elf32-big srec symbolsrec
i386 elf64-little elf64-big elf32-little elf32-big srec symbolsrec

tekhex binary ihex trad-core
i386 tekhex binary ihex ---------

[root@localhost test]# objdump --section=.text -s mytest.o
mytest.o:     file format elf32-i386
Contents of section .text:
0000 5589e583 ec10c645 ff61c9c3 5589e583  U......E.a..U...
0010 ec10c745 fc020000 008345fc 02c9c3    ...E......E....

[root@localhost test]# objdump -j .text -S mytest.o
mytest.o:     file format elf32-i386
Disassembly of section .text:
00000000 <_Z9printTestv>:
void printTest()
0:   55                      push   %ebp
1:   89 e5                   mov    %esp,%ebp
3:   83 ec 10                sub    $0x10,%esp
{
char a;
a = 'a';
6:   c6 45 ff 61             movb   $0x61,0xffffffff(%ebp)
}
a:   c9                      leave
b:   c3                      ret

000000c <_Z10printTest2v>:
void printTest2()
c:   55                      push   %ebp
d:   89 e5                   mov    %esp,%ebp
f:   83 ec 10                sub    $0x10,%esp
{
int a = 2;
12:   c7 45 fc 02 00 00 00    movl   $0x2,0xfffffffc(%ebp)
a+=2;
19:   83 45 fc 02             addl   $0x2,0xfffffffc(%ebp)
}
1d:   c9                      leave
1e:   c3                      ret

[root@localhost test]# objdump -S mytest.o
mytest.o:     file format elf32-i386

Disassembly of section .text:

00000000 <_Z9printTestv>:
void printTest()
0:   55                      push   %ebp
1:   89 e5                   mov    %esp,%ebp
3:   83 ec 10                sub    $0x10,%esp
{
char a;
a = 'a';
6:   c6 45 ff 61             movb   $0x61,0xffffffff(%ebp)
}
a:   c9                      leave
b:   c3                      ret

0000000c <_Z10printTest2v>:
void printTest2()
c:   55                      push   %ebp
d:   89 e5                   mov    %esp,%ebp
f:   83 ec 10                sub    $0x10,%esp
{
int a = 2;
12:   c7 45 fc 02 00 00 00    movl   $0x2,0xfffffffc(%ebp)
a+=2;
19:   83 45 fc 02             addl   $0x2,0xfffffffc(%ebp)
}
1d:   c9                      leave
1e:   c3                      ret

[root@localhost test]# objdump -t mytest.o
mytest.o:     file format elf32-i386

SYMBOL TABLE:
00000000 l    df *ABS*  00000000 mytest.cpp
00000000 l    d  .text  00000000 .text
00000000 l    d  .data  00000000 .data
00000000 l    d  .bss   00000000 .bss
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_pubnames        00000000 .debug_pubnames
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    d  .note.GNU-stack        00000000 .note.GNU-stack
00000000 l    d  .comment       00000000 .comment
00000000 g     F .text  0000000c _Z9printTestv
00000000         *UND*  00000000 __gxx_personality_v0
0000000c g     F .text  00000013 _Z10printTest2v

[root@localhost test]# nm -s mytest.o
0000000c T _Z10printTest2v
00000000 T _Z9printTestv
U __gxx_personality_v0

[root@localhost test]# objdump -t -C mytest.o
mytest.o:     file format elf32-i386
SYMBOL TABLE:
00000000 l    df *ABS*  00000000 mytest.cpp
00000000 l    d  .text  00000000 .text
00000000 l    d  .data  00000000 .data
00000000 l    d  .bss   00000000 .bss
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_pubnames        00000000 .debug_pubnames
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    d  .note.GNU-stack        00000000 .note.GNU-stack
00000000 l    d  .comment       00000000 .comment
00000000 g     F .text  0000000c printTest()
00000000         *UND*  00000000 __gxx_personality_v0
0000000c g     F .text  00000013 printTest2()

[root@localhost test]# objdump -d mytest.o
mytest.o:     file format elf32-i386
Disassembly of section .text:

00000000 <_Z9printTestv>:
0:   55                      push   %ebp
1:   89 e5                   mov    %esp,%ebp
3:   83 ec 10                sub    $0x10,%esp
6:   c6 45 ff 61             movb   $0x61,0xffffffff(%ebp)
a:   c9                      leave
b:   c3                      ret

0000000c <_Z10printTest2v>:
c:   55                      push   %ebp
d:   89 e5                   mov    %esp,%ebp
f:   83 ec 10                sub    $0x10,%esp
12:   c7 45 fc 02 00 00 00    movl   $0x2,0xfffffffc(%ebp)
19:   83 45 fc 02             addl   $0x2,0xfffffffc(%ebp)
1d:   c9                      leave
1e:   c3                      ret

[root@localhost test]# objdump -d -l mytest.o
mytest.o:     file format elf32-i386
Disassembly of section .text:

00000000 <_Z9printTestv>:
_Z9printTestv():
/root/test/04_libraryTest/mytest.cpp:1
0:   55                      push   %ebp
1:   89 e5                   mov    %esp,%ebp
3:   83 ec 10                sub    $0x10,%esp
/root/test/04_libraryTest/mytest.cpp:4
6:   c6 45 ff 61             movb   $0x61,0xffffffff(%ebp)
/root/test/04_libraryTest/mytest.cpp:5
a:   c9                      leave
b:   c3                      ret

0000000c <_Z10printTest2v>:
_Z10printTest2v():
/root/test/04_libraryTest/mytest.cpp:6
c:   55                      push   %ebp
d:   89 e5                   mov    %esp,%ebp
f:   83 ec 10                sub    $0x10,%esp
/root/test/04_libraryTest/mytest.cpp:8
12:   c7 45 fc 02 00 00 00    movl   $0x2,0xfffffffc(%ebp)
/root/test/04_libraryTest/mytest.cpp:9
19:   83 45 fc 02             addl   $0x2,0xfffffffc(%ebp)
/root/test/04_libraryTest/mytest.cpp:10
1d:   c9                      leave
1e:   c3                      ret

[root@localhost test]# objdump -h mytest.o
mytest.o:     file format elf32-i386

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
0 .text         0000001f  00000000  00000000  00000034  2**2
CONTENTS, ALLOC, LOAD, readonly, CODE
1 .data         00000000  00000000  00000000  00000054  2**2
CONTENTS, ALLOC, LOAD, DATA
2 .bss          00000000  00000000  00000000  00000054  2**2
ALLOC
3 .debug_abbrev 00000046  00000000  00000000  00000054  2**0
CONTENTS, READONLY, DEBUGGING
4 .debug_info   000000ed  00000000  00000000  0000009a  2**0
CONTENTS, RELOC, READONLY, DEBUGGING
5 .debug_line   0000003e  00000000  00000000  00000187  2**0
CONTENTS, RELOC, READONLY, DEBUGGING
6 .debug_frame  00000044  00000000  00000000  000001c8  2**2
CONTENTS, RELOC, READONLY, DEBUGGING
7 .debug_loc    00000058  00000000  00000000  0000020c  2**0
CONTENTS, READONLY, DEBUGGING
8 .debug_pubnames 0000002f  00000000  00000000  00000264  2**0
CONTENTS, RELOC, READONLY, DEBUGGING
9 .debug_aranges 00000020  00000000  00000000  00000293  2**0
CONTENTS, RELOC, READONLY, DEBUGGING
10 .comment      0000002e  00000000  00000000  000002b3  2**0
CONTENTS, READONLY
11 .note.GNU-stack 00000000  00000000  00000000  000002e1  2**0
CONTENTS, READONLY

result=`expr 2 + 3`
result=$(expr $no1 + 5)

#include <stdio.h>
int nGlobalVar = 0;

int tempFunction(int a, int b)
{
printf("tempFunction is called, a = %d, b = %d /n", a, b);
return (a + b);
}

int main()
{
int n;
n = 1;
n++;
n--;

nGlobalVar += 100;
nGlobalVar -= 12;

printf("n = %d, nGlobalVar = %d /n", n, nGlobalVar);

n = tempFunction(1, 2);
printf("n = %d", n);

return 0;
}

gcc gdb-sample.c -o gdb-sample -g

GNU gdb Red Hat Linux (5.3post-0.20021129.18rh)
Copyright 2003 free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
type "show copying" to see the conditions.
There is absolutely no warranty for GDB. Type "show warranty" for details.
This GDB was configured as "i386-redhat-linux-gnu".
(gdb)

(gdb) file gdb-sample
Reading symbols from gdb-sample...done.

(gdb) r
Starting program: /home/liigo/temp/test_jmp/test_jmp/gdb-sample
n = 1, nGlobalVar = 88
tempFunction is called, a = 1, b = 2
n = 3
Program exited normally.

(gdb) b main
Breakpoint 1 at 0x804835c: file gdb-sample.c, line 19.

(gdb) r
Starting program: /home/liigo/temp/gdb-sample

Breakpoint 1, main () at gdb-sample.c:19
19 n = 1;

(gdb) s
20 n++;

(gdb) p n
$1 = 1

(gdb) b 26
Breakpoint 2 at 0x804837b: file gdb-sample.c, line 26.
(gdb) b tempFunction
Breakpoint 3 at 0x804832e: file gdb-sample.c, line 12.

(gdb) c
Continuing.

Breakpoint 2, main () at gdb-sample.c:26
26 printf("n = %d, nGlobalVar = %d /n", n, nGlobalVar);
(gdb) p nGlobalVar
$2 = 88
(gdb) c
Continuing.
n = 1, nGlobalVar = 88

Breakpoint 3, tempFunction (a=1, b=2) at gdb-sample.c:12
12 printf("tempFunction is called, a = %d, b = %d /n", a, b);
(gdb) p a
$3 = 1
(gdb) p b
$4 = 2

(gdb) c
Continuing.
tempFunction is called, a = 1, b = 2
n = 3
Program exited normally.

(gdb) display /i $pc
(gdb)

(gdb) r
Starting program: /home/liigo/temp/test_jmp/test_jmp/gdb-sample

Breakpoint 1, main () at gdb-sample.c:19
19 n = 1;
1: x/i $pc 0x804835c <main+16>: movl $0x1,0xfffffffc(%ebp)

(gdb) si
20 n++;
1: x/i $pc 0x8048363 <main+23>: lea 0xfffffffc(%ebp),%eax
(gdb) si
0x08048366 20 n++;
1: x/i $pc 0x8048366 <main+26>: incl (%eax)
(gdb) si
21 n--;
1: x/i $pc 0x8048368 <main+28>: lea 0xfffffffc(%ebp),%eax
(gdb) si
0x0804836b 21 n--;
1: x/i $pc 0x804836b <main+31>: decl (%eax)
(gdb) si
23 nGlobalVar += 100;
1: x/i $pc 0x804836d <main+33>: addl $0x64,0x80494fc

(gdb) d
Delete all breakpoints? (y or n) y
(gdb)

(gdb) b *main
Breakpoint 4 at 0x804834c: file gdb-sample.c, line 17.
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/liigo/temp/test_jmp/test_jmp/gdb-sample

Breakpoint 4, main () at gdb-sample.c:17
17 {
1: x/i $pc 0x804834c <main>: push %ebp
(gdb) si
0x0804834d 17 {
1: x/i $pc 0x804834d <main+1>: mov %esp,%ebp
(gdb) si
0x0804834f in main () at gdb-sample.c:17
17 {
1: x/i $pc 0x804834f <main+3>: sub $0x8,%esp
(gdb) si
0x08048352 17 {
1: x/i $pc 0x8048352 <main+6>: and $0xfffffff0,%esp
(gdb) si
0x08048355 17 {
1: x/i $pc 0x8048355 <main+9>: mov $0x0,%eax
(gdb) si
0x0804835a 17 {
1: x/i $pc 0x804835a <main+14>: sub %eax,%esp
(gdb) si
19 n = 1;
1: x/i $pc 0x804835c <main+16>: movl $0x1,0xfffffffc(%ebp)

(gdb) i r
eax 0xbffff6a4 -1073744220
ecx 0x42015554 1107383636
edx 0x40016bc8 1073834952
ebx 0x42130a14 1108544020
esp 0xbffff6a0 0xbffff6a0
ebp 0xbffff6a8 0xbffff6a8
esi 0x40015360 1073828704
edi 0x80483f0 134513648
eip 0x8048366 0x8048366
eflags 0x386 902
cs 0x23 35
ss 0x2b 43
ds 0x2b 43
es 0x2b 43
fs 0x0 0
gs 0x33 51

(gdb) i r eax
eax 0xbffff6a4 -1073744220

(gdb) q
The program is running. exit anyway? (y or n)

if test     #表达式为真
if test !   #表达式为假
test 表达式1 –a 表达式2     #两个表达式都为真
test 表达式1 –o 表达式2     #两个表达式有一个为真
test 表达式1 ! 表达式2       #条件求反

test –n 字符串    #字符串的长度非零
test –z 字符串    #字符串的长度是否为零
test 字符串1＝字符串2       #字符串是否相等，若相等返回true
test 字符串1!＝字符串2      #字符串是否不等，若不等反悔false

test 整数1 -eq 整数2    #整数相等
test 整数1 -ge 整数2    #整数1大于等于整数2
test 整数1 -gt 整数2    #整数1大于整数2
test 整数1 -le 整数2    #整数1小于等于整数2
test 整数1 -lt 整数2    #整数1小于整数2
test 整数1 -ne 整数2    #整数1不等于整数2

test File1 –ef File2    两个文件是否为同一个文件，可用于硬连接。主要判断两个文件是否指向同一个inode。
test File1 –nt File2    判断文件1是否比文件2新
test File1 –ot File2    判断文件1比是否文件2旧
test –b file   #文件是否块设备文件
test –c File   #文件并且是字符设备文件
test –d File   #文件并且是目录
test –e File   #文件是否存在 （常用）
test –f File   #文件是否为正规文件 （常用）
test –g File   #文件是否是设置了组id
test –G File   #文件属于的有效组ID
test –h File   #文件是否是一个符号链接（同-L）
test –k File   #文件是否设置了Sticky bit位
test –b File   #文件存在并且是块设备文件
test –L File   #文件是否是一个符号链接（同-h）
test –o File   #文件的属于有效用户ID
test –p File   #文件是一个命名管道
test –r File   #文件是否可读
test –s File   #文件是否是非空白文件
test –t FD     #文件描述符是在一个终端打开的
test –u File   #文件存在并且设置了它的set-user-id位
test –w File   #文件是否存在并可写
test –x File   #文件属否存在并可执行

indent -bs /home/rootlocal/桌面/test.c

gcc test.c

gcc test.c -o test

gcc -E test.c -o test.i

gcc -S test.i

gcc -c test.s

gcc test.o -o test

gcc -O1 test.c -o test

gcc testfun.c test.c -o test

gcc -c testfun.c    #将testfun.c编译成testfun.o
gcc -c test.c       #将test.c编译成test.o
gcc -o testfun.o test.o -o test    #将testfun.o和test.o链接成test

[root@localhost ~]# lpc
lpc> ?
命令可能是缩写。命令是：

exit    help    quit    status  ?
lpc> exit

lpr -P lp man1 man2

lp /etc/motd

lp -c -m -n30 -dlp0:lpd0 /etc/motd

lp -t "blah" -o -f -o -a /etc/motd

lp myfile

lp -s myfile

lprm -Phpprint 102

lprm 101
